xquery version "3.1";

module namespace app="http://exist-db.org/apps/tei-editoriale/templates";
import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/apps/tei-editoriale/config" at "config.xqm";
import module namespace kwic = "http://exist-db.org/xquery/kwic" at "resource:org/exist/xquery/lib/kwic.xql";



(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:XMLtoHTMLDOC1 ($node as node(), $model as map (*), $query as xs:string?) {
let $xml := doc("/db/apps/tei-editoriale/data/Madame-Bovary.xml")
let $xsl := doc("/db/apps/tei-editoriale/resources/xslt/xmlToHtmlDOC.xsl")
let $params :=
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>

return
    transform:transform($xml, $xsl, $params)
};

declare function app:XMLtoHTMLDOC2 ($node as node(), $model as map (*), $query as xs:string?) {
let $xml := doc("/db/apps/tei-editoriale/data/SIDDHARTHA.xml")
let $xsl := doc("/db/apps/tei-editoriale/resources/xslt/xmlToHtmlDOC.xsl")
let $params :=
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>

return
    transform:transform($xml, $xsl, $params)
};

declare function app:XMLtoHTMLDOC3 ($node as node(), $model as map (*), $query as xs:string?) {
let $xml := doc("/db/apps/tei-editoriale/data/WH.xml")
let $xsl := doc("/db/apps/tei-editoriale/resources/xslt/xmlToHtmlDOC.xsl")
let $params :=
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>

return
    transform:transform($xml, $xsl, $params)
};

declare function app:XMLtoHTMLPAGE ($node as node(), $model as map (*), $query as xs:string?) {
let $xml := doc("/db/apps/tei-editoriale/data/index.xml")
let $xsl := doc("/db/apps/tei-editoriale/resources/xslt/xmlToHtmlPAGE.xsl")
let $params :=
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>

return
    transform:transform($xml, $xsl, $params)
};

declare function app:ft_search($node as node(), $model as map (*)) {
    if (request:get-parameter("searchexpr", "") !="") then
    let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
    for $hit in collection(concat($config:app-root, '/data/'))//p[ft:query(.,$searchterm)]
    let $document := document-uri(root($hit))
    let $score as xs:float := ft:score($hit)
    order by $score descending
    return
    <tr>
        <td>{$score}</td>
        <td>{kwic:summarize($hit, <config width="40" link="{$document}" />)}</td>
        <td>{$document}</td>
    </tr>
 else
    <div>Nothing to search for</div>
 };
